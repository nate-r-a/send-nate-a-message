<head>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/milligram/1.3.0/milligram.css">

  <script src="https://unpkg.com/konva@2.4.2/konva.min.js"></script>

  <style media="screen">
    .konvajs-content {
      margin: 0 auto;
    }

    canvas {
      outline: 2px solid black;
      margin: 10px;
    }

    span {
      cursor: pointer;
    }

    .slider {
      width: 300px !important;
      margin: 8px auto 20px;
    }

    .slider-circle {
      display: none !important;
    }

    .selected {
      outline: 10px solid dodgerblue;
    }

    .recent-message {
      /* width: 192px; */
      border: 2px solid black;
      max-width: 160px;
      max-height: 160px;
    }
  </style>

</head>
<body style="text-align: center; touch-action: none;">
  <% flash.each do |key, value| %>
    <div class="alert alert-<%= key %>"><%= value %></div>
  <% end %>

  <h1 style="margin: 0;">Send Nate a message!</h1>
  <h4>Please don't hack me</h4>
  <br>

  <div class="recent-messages">
    <div>Recent messages:</div>
    <% @recent_messages.each do |message| %>
      <img class="recent-message" src="<%= message.image %>">
    <% end %>
  </div>

  <div><span onclick="showDraw()"><strong>Click here</strong></span> to draw a picture, or <span onclick="showUpload()"><strong>click here</strong></span> to upload an image</div>

  <div id="draw-a-picture">
    Tool:
    <select style="width: 100px;" id="tool">
      <option value="brush">Brush</option>
      <!-- <option value="eraser">Eraser</option> -->
    </select>
    <div id="container"></div>
    <script>
      var width = 384;
      var height = 384;

      // first we need Konva core things: stage and layer
      var stage = new Konva.Stage({
        container: 'container',
        width: width,
        height: height
      });

      var layer = new Konva.Layer();
      stage.add(layer);


      // then we are going to draw into special canvas element
      var canvas = document.createElement('canvas');
      canvas.setAttribute("id", "drawCanvas");
      canvas.width = stage.width();
      canvas.height = stage.height();

      // created canvas we can add to layer as "Konva.Image" element
      var image = new Konva.Image({
        image: canvas,
        x: 0,
        y: 0
      });
      layer.add(image);
      stage.draw();

      // Good. Now we need to get access to context element
      var context = canvas.getContext('2d');
      context.fillStyle = "#ffffff";
      context.fillRect(0, 0, canvas.width, canvas.height);
      context.strokeStyle = "#000";
      context.lineJoin = "round";
      context.lineWidth = 5;


      var isPaint = false;
      var lastPointerPosition;
      var mode = 'brush';


      // now we need to bind some events
      // we need to start drawing on mousedown
      // and stop drawing on mouseup
      image.on('mousedown touchstart', function () {
        isPaint = true;
        lastPointerPosition = stage.getPointerPosition();

      });

      // will it be better to listen move/end events on the window?

      stage.addEventListener('mouseup touchend', function () {
        isPaint = false;
      });

      stage.addEventListener('mouseout', function() {
        isPaint = false;
      });

      // and core function - drawing
      stage.addEventListener('mousemove touchmove', function () {
        if (!isPaint) {
          return;
        }

        if (mode === 'brush') {
          context.globalCompositeOperation = 'source-over';
        }
        if (mode === 'eraser') {
          context.globalCompositeOperation = 'destination-out';
        }
        context.beginPath();

        var localPos = {
          x: lastPointerPosition.x - image.x(),
          y: lastPointerPosition.y - image.y()
        };
        context.moveTo(localPos.x, localPos.y);
        var pos = stage.getPointerPosition();
        localPos = {
          x: pos.x - image.x(),
          y: pos.y - image.y()
        };
        context.lineTo(localPos.x, localPos.y);
        context.closePath();
        context.stroke();


        lastPointerPosition = pos;
        layer.batchDraw();
      });



      var select = document.getElementById('tool');
      select.addEventListener('change', function () {
        mode = select.value;
      });

    </script>
  </div>
  <div id="upload-a-picture">
    <input type="file" id="imageLoader" name="imageLoader"/>
    <br>
    <span id="dithering-message"></span>
    <div style="display: inline-flex;" id="top-canvases">
      <canvas id="imageCanvas" width="384" height="384"></canvas>
      <canvas onclick="selectCanvas(this)" class="canvas" id="atkinsonCanvas" width="384" height="384"></canvas>
    </div>
    <div style="display: inline-flex;">
      <div>
        <canvas onclick="selectCanvas(this)" class="canvas" id="thresholdCanvas" width="384" height="384"></canvas>
        <div class="slider-container" id="threshold-slider"></div>
      </div>
      <div>
        <canvas onclick="selectCanvas(this)" class="canvas" id="bayerCanvas" width="384" height="384"></canvas>
        <div class="slider-container" id="bayer-slider"></div>
      </div>
    </div>

    <script>
      options = {
          isOneWay: true,
          isDate: false,
          min: 50,
          max: 150,
          start: 100
      };
      var thresholdSlider = new Slider(document.getElementById('threshold-slider'), options);

      options = {
          isOneWay: true,
          isDate: false,
          min: 50,
          max: 150,
          start: 100
      };
      var bayerSlider = new Slider(document.getElementById('bayer-slider'), options);

      //  TODO: REFACTOR THIS MESS
      thresholdSlider.subscribe('moving', function(data) {
        // console.log(data.right);
        var thresholdCanvas = document.getElementById('thresholdCanvas');
        var thresholdContext = thresholdCanvas.getContext('2d');
        i2 = imageContext.getImageData(0, 0, imageCanvas.width, imageCanvas.height);
        thresholdImage = new CanvasDither().threshold(i2, data.right);
        thresholdContext.putImageData(thresholdImage, 0, 0);
      });

      bayerSlider.subscribe('moving', function(data) {
        // console.log(data.right);
        var bayerCanvas = document.getElementById('bayerCanvas');
        var bayerContext = bayerCanvas.getContext('2d');
        i2 = imageContext.getImageData(0, 0, imageCanvas.width, imageCanvas.height);
        bayerImage = new CanvasDither().bayer(i2, data.right);
        bayerContext.putImageData(bayerImage, 0, 0);
      });
    </script>

    <script>
      var imageLoader = document.getElementById('imageLoader');
      imageLoader.addEventListener('change', handleImage, false);

      var imageCanvas = document.getElementById('imageCanvas');
      var thresholdCanvas = document.getElementById('thresholdCanvas');
      var bayerCanvas = document.getElementById('bayerCanvas');
      var atkinsonCanvas = document.getElementById('atkinsonCanvas');

      var imageContext = imageCanvas.getContext('2d');
      var thresholdContext = thresholdCanvas.getContext('2d');
      var bayerContext = bayerCanvas.getContext('2d');
      var atkinsonContext = atkinsonCanvas.getContext('2d');

      var addMessage = true;
      function handleImage(e){
        document.getElementById('atkinsonCanvas').classList.add('selected');

        if (addMessage) {
          $("#dithering-message").append("<div><b>Select</b> one of the dithering options below. <b>Atkinson dithering</b> (top-right) is recommended.</div>")
          addMessage = false;
        }

        var reader = new FileReader();
        reader.onload = function(event){
          var img = new Image();

          img.onload = function(){
            if (img.width > img.height) {
              let coeff = img.width / 384;
              img.width = 384;
              img.height = img.height / coeff;
            } else if (img.height > img.width) {
              let coeff = img.height / 384;
              img.height = 384;
              img.width = img.width / coeff;
            }

            imageCanvas.width = thresholdCanvas.width = bayerCanvas.width = atkinsonCanvas.width = img.width;
            imageCanvas.height = thresholdCanvas.height = bayerCanvas.height = atkinsonCanvas.height = img.height;
            imageContext.drawImage(img, 0, 0, img.width, img.height);

            i1 = imageContext.getImageData(0, 0, imageCanvas.width, imageCanvas.height);
            i2 = imageContext.getImageData(0, 0, imageCanvas.width, imageCanvas.height);
            i3 = imageContext.getImageData(0, 0, imageCanvas.width, imageCanvas.height);

            atkinsonImage = new CanvasDither().atkinson(i1);
            thresholdImage = new CanvasDither().threshold(i2, 100);
            bayerImage = new CanvasDither().bayer(i3, 100);

            atkinsonContext.putImageData(atkinsonImage, 0, 0, 0, 0, img.width, img.height);
            thresholdContext.putImageData(thresholdImage, 0, 0, 0, 0, img.width, img.height);
            bayerContext.putImageData(bayerImage, 0, 0, 0, 0, img.width, img.height);

            // console.log(thresholdImage, bayerImage, atkinsonImage)

          }
          img.src = event.target.result;
        }
        reader.readAsDataURL(e.target.files[0]);
      }
    </script>
  </div>
  <br>
  <input id="text-message" type="text" name="" value="" placeholder="Enter a text message here (if you want)" style="width: 600px;">
  <br>
  <input type="checkbox" id="private" name="private" value="true"> Don't make this message public
  <br>
  <input type="submit" name="submit" value="Send!" onclick="submitMessage()">
</body>

<script type="text/javascript">
  $("#draw-a-picture").hide();
  $("#upload-a-picture").hide();
  var upload = false;

  showDraw = () => {
    $("#draw-a-picture").show();
    $("#upload-a-picture").hide();
    upload = false;
  }

  showUpload = () => {
    $("#draw-a-picture").hide();
    $("#upload-a-picture").show();
    upload = true;
  }

  function selectCanvas(element) {
    canvases = document.querySelectorAll(".canvas")

    canvases.forEach(function(canvas) {
      canvas.classList.remove('selected');
    });

    console.log(element)
    element.classList.add('selected')
  }

  function submitMessage() {
    var canvasData;
    if (upload) {
      canvasData = document.querySelector('.selected').toDataURL();
      // var image = canvas.toDataURL("image/png").replace("image/png", "image/octet-stream");
      // window.location.href=image; // it will save locally

    } else {
      canvasData = canvas.toDataURL();
    }

    var private

    $.ajax({
      url: "/messages",
      type: "POST",
      beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
      data: { message: {
        text: $("#text-message").val(),
        image: canvasData,
        private: document.getElementById("private").checked
      }}
    })
    console.log(canvasData)
  }
</script>
